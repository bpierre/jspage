#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var concat = require('concat-stream');
var Promise = require('bluebird');
var readFile = Promise.promisify(fs.readFile);
var jspage = require('../');

var NO_SCRIPT_ERR = new Error('no script provided');

program
  .version(require('../package.json').version)
  .usage('[options] [file]')
  .option('-t, --title <title>', 'The page title')
  .option('-b, --blank', 'Blank page (no code preview)');

program.on('--help', function() {
  console.log('  Examples:');
  console.log('');
  console.log('    $ jspage foo.js > bar.html');
  console.log('    $ jspage < foo.js > bar.html');
  console.log('    $ cat foo.js bar.js | jspage -b > baz.html');
  console.log('    $ echo "alert(\'Hello World\')" | jspage > foo.html');
  console.log('');
});

program.parse(process.argv);

var options = {};
options.title = program.title;
options.blank = program.blank;

programContent(program)
  .then(jspage(options))
  .then(function(content) {
    process.stdout.write(content);
  })
  .catch(function(err) {
    if (err !== NO_SCRIPT_ERR) {
      process.stderr.write('\n  ' + err + '\n');
    }
    programHelp(process.stderr, program);
    process.exit(1);
  });

function readStdin() {
  return new Promise(function(resolve, reject) {
    process.stdin.setEncoding('utf8');
    process.stdin.pipe(concat(function(data) {
      resolve(data);
    }));
  });
}

function programContent(program) {
  if (!process.stdin.isTTY || program.args[0] === '-') return readStdin();
  if (program.args[0]) return readFile(program.args[0], 'utf8');
  return Promise.reject(NO_SCRIPT_ERR);
}

function programHelp(output, program) {
  output.write(program.helpInformation());
  program.emit('--help');
}
