#!/usr/bin/env node

var fs = require('fs');
var program = require('commander');
var concat = require('concat-stream');
var Promise = require('bluebird');
var readFile = Promise.promisify(fs.readFile);
var jspage = require('../');

program
  .version(require('../package.json').version)
  .usage('[options] [file]')
  .option('-t, --title <title>', 'The page title')
  .option('-b, --blank', 'Blank page (no code preview)');

program.on('--help', function() {
  console.log('  Examples:');
  console.log('');
  console.log('    $ jspage foo.js > bar.html');
  console.log('    $ jspage < foo.js > bar.html');
  console.log('    $ cat foo.js bar.js | jspage -b > baz.html');
  console.log('    $ echo "alert(\'Hello World\')" | jspage > foo.html');
  console.log('');
});

program.parse(process.argv);

var options = {};
options.title = program.title;
options.blank = program.blank;

programContent(program)
  .then(jspage(options))
  .then(function(content) {
    process.stdout.write(content);
  })
  .catch(function(err) {
    if (err.name === 'NoScriptError' && process.stdin.isTTY) {
      programHelp(process.stderr, program);
      return;
    }
    process.stderr.write('\n  ' + err + '\n\n');
    process.exit(1);
  });

function programContent(program) {
  if (!process.stdin.isTTY || program.args[0] === '-') {
    return readStdin().catch(function(err) {
      if (err.name === 'NoContentError') throw noScriptError();
      throw err;
    });
  }
  if (program.args[0]) return readFile(program.args[0], 'utf8');
  return Promise.reject(noScriptError());
}

function readStdin() {
  return new Promise(function(resolve, reject) {
    process.stdin.setEncoding('utf8');
    process.stdin.pipe(concat(function(data) {
      if (Array.isArray(data)) data = data.join('');
      if (data) resolve(data);
      else reject(noContentError());
    }));
  });
}

function programHelp(output, program) {
  output.write(program.helpInformation());
  program.emit('--help');
}

function noContentError() {
  var err = new Error('no content provided');
  err.name = 'NoContentError';
  return err;
}

function noScriptError() {
  var err = new Error('no script provided');
  err.name = 'NoScriptError';
  return err;
}
